import Post from "../Model/postModel.js";
import Admin from "../Model/adminModel.js"
import bcrypt from "bcrypt";
import { sendSMS } from "../utils/sendSMS.js";
import translate from '@vitalets/google-translate-api'
import { sendNotificationEmail } from "../config/notifications.js";
import { adminToken } from "../utils/generateToken.js";
// Admin signup
export const adminSingup = async (req, res) => {
    try {
      console.log(req.body);
  
      const { email, password, name } = req.body;
      const adminExist = await Admin.findOne({ email });
      if (adminExist) {
        return res.send("Admin is already exist");
      }
   
      const saltRounds = 10;
      const hashPassword = await bcrypt.hash(password, saltRounds);
  
      const newAdmin = new Admin({
        name,
        email,
        hashPassword,
        role: "admin",
      });
      const newAdminrCreated = await newAdmin.save();
  
      if (!newAdminrCreated) {
        return res.send("Admin is not created");
      }
  
      const token = adminToken(newAdminrCreated);
      res.cookie("token", token);
      res.json({ message: "Admin signed in!", token });
    } catch (error) {
      console.log(error, "Something wrong");
    }
  };

// Admin signin
  export const adminSingin = async (req, res) => {
    try {
      
      const { email, password } =req.body;
     
      const admin = await Admin.findOne({ email });
  
      if (!admin) {
        return res.status(404).send("Admin is not found");
      }

  const saltRounds = 10;
      const hashPassword = await bcrypt.hash(password, saltRounds);
      const matchPassword = await bcrypt.compare(
        password,
        hashPassword
      );
  
      console.log(matchPassword, "matchpassword");
      if (!matchPassword) {
        return res.send("password is not match");
      }
  
      const token = adminToken(admin);
      res.cookie("token", token,{secure: true, 
        sameSite: 'None', 
        httpOnly: true, 
        maxAge: 24 * 60 * 60 * 1000 });
      res.status(200).json({
        message : "Login successfully",
        data : token,
        success : true, admin: { id: admin._id, firstName: admin.firstName, email: admin.email },
        error : false
      })
    } catch (error) {
      console.error("Error", error);
      res.status(500).send("Internal Server Error");
    }
  };


// Fetch pending posts
export const fetchPendingPosts= async (req, res) => {
    try {
      const posts = await Post.find({ status: 'pending' }).populate('userId', 'email');
      res.json(posts);
    } catch (err) {
      res.status(500).json({ message: err.message });
    }
  };



// Approve a post
export const approvePost= async (req, res) => {
    try {
      const post = await Post.findByIdAndUpdate(req.params.id, { status: 'approved' }, { new: true });
      
      
      
      
      res.json(post);
    } catch (err) {
      res.status(500).json({ message: err.message });
    }
  };

  // Reject a post
export const RejectPost= async (req, res) => {
    try {
      const post = await Post.findByIdAndUpdate(req.params.id, { status: 'rejected' }, { new: true });
      res.json(post);
    } catch (err) {
      res.status(500).json({ message: err.message });
    }
  };

  // update post status
 {/*export const updatePostStatus = async (req, res) => {
    const { postId, status } = req.body; // status: 'approved' or 'rejected'
    if (!["approved", "rejected"].includes(status)) {
        return res.status(400).json({ message: "Invalid status" });
    }

    try {
        const updatedPost = await Post.findByIdAndUpdate(
            postId,
            { status },
            { new: true }
        ).populate('userId', 'email');;
        if (!updatedPost) {
            return res.status(404).json({ message: "Post not found" });
        }

         // Ensure the user exists before sending the notification
    if (updatedPost.userId && updatedPost.userId.email) {
      await sendNotificationEmail(
        updatedPost.userId.email,
        "Post Status Update",
        `Hi, Your post "${updatedPost._id}" has been ${status}.`
      );
    }
        res.status(200).json({ message: `Post ${status}`, success: true });
    } catch (error) {
        console.error("Error updating post status:", error);
        res.status(500).json({ message: "Error updating post status", error });
    }
};*/}




export const updatePostStatus = async (req, res) => {
    const { postId, status,stickyDuration  } = req.body; // status: 'approved' or 'rejected'
    
    if (!["approved", "rejected"].includes(status)) {
        return res.status(400).json({ message: "Invalid status" });
    }

    try {
      const updateFields = { status };
    // If post is approved and admin chooses a sticky duration, update stickyUntil:
    if (status === "approved" && stickyDuration) {
      updateFields.stickyUntil = new Date(Date.now() + parseInt(stickyDuration));
    }
        const updatedPost = await Post.findByIdAndUpdate(
            postId,
            { status }, updateFields,
            { new: true }
        ).populate('userId', 'username email phoneNumber');

        if (!updatedPost) {
            return res.status(404).json({ message: "Post not found" });
        }
         // Convert username to Hindi using Google Translate API
         let translatedUsername;
         try {
             const translation = await translate(updatedPost.userId.username, { to: "hi" });
             translatedUsername = translation.text;
         } catch (error) {
             console.error('Translation error:', error);
             translatedUsername = updatedPost.userId.username; // Fallback
         }
         
            

        // Ensure the user exists before sending the notification
        if (updatedPost.userId && updatedPost.userId.email) {
            const userName = updatedPost.userId.username; // Fetch username
            const userEmail = updatedPost.userId.email; // Fetch user email
            
            if (status === "approved") {
                // Email for approved post
                const subject = "Your Post is Live тАУ Let the World Hear Your Voice! ЁЯМНтЬи";
                const message = `Hi ${userName},

ЁЯОЙ Great news! Your post is now live on Magnifier and ready to inspire, engage, and spark conversations! 

Your voice is now part of a vibrant community of thinkers, creators, and changemakers. HereтАЩs how you can make the most of it:
- Share your post with friends and followers to spread the word.
- Engage with comments тАУ your insights matter!
- Stay active тАУ keep sharing bold ideas and inspiring others.

Thank you for being a part of Magnifier. Together, weтАЩre building a platform where every voice matters! ЁЯЪА

Keep shining,  
The Magnifier Team

рд╡рд┐рд╖рдп: рдЖрдкрдХреА рдкреЛрд╕реНрдЯ рд▓рд╛рдЗрд╡ рд╣реИ тАУ рджреБрдирд┐рдпрд╛ рдХреЛ рдЖрдкрдХреА рдЖрд╡рд╛рдЬрд╝ рд╕реБрдирдиреЗ рджреЗрдВ! ЁЯМНтЬи

рдирдорд╕реНрддреЗ ${translatedUsername},

ЁЯОЙ рдмрдбрд╝реА рдЦреБрд╢рдЦрдмрд░реА! рдЖрдкрдХреА рдкреЛрд╕реНрдЯ рдЕрдм рдореИрдЧреНрдирд┐рдлрд╛рдпрд░ рдкрд░ рд▓рд╛рдЗрд╡ рд╣реИ рдФрд░ рд▓реЛрдЧреЛрдВ рдХреЛ рдкреНрд░реЗрд░рд┐рдд рдХрд░рдиреЗ, рдЬреЛрдбрд╝рдиреЗ рдФрд░ рдмрд╛рддрдЪреАрдд рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд╣реИ! 

рдЖрдкрдХреА рдЖрд╡рд╛рдЬрд╝ рдЕрдм рд╡рд┐рдЪрд╛рд░рд╢реАрд▓, рд░рдЪрдирд╛рддреНрдордХ рдФрд░ рдмрджрд▓рд╛рд╡ рд▓рд╛рдиреЗ рд╡рд╛рд▓реЗ рд▓реЛрдЧреЛрдВ рдХреЗ рдПрдХ рдЬреАрд╡рдВрдд рд╕рдореБрджрд╛рдп рдХрд╛ рд╣рд┐рд╕реНрд╕рд╛ рд╣реИред рдЗрд╕реЗ рдФрд░ рдмреЗрд╣рддрд░ рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдк рдпрд╣ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ:
- рдЕрдкрдиреА рдкреЛрд╕реНрдЯ рдХреЛ рджреЛрд╕реНрддреЛрдВ рдФрд░ рдлреЙрд▓реЛрдЕрд░реНрд╕ рдХреЗ рд╕рд╛рде рд╢реЗрдпрд░ рдХрд░реЗрдВ рддрд╛рдХрд┐ рдпрд╣ рдФрд░ рд▓реЛрдЧреЛрдВ рддрдХ рдкрд╣реБрдВрдЪреЗред
- рдХрдореЗрдВрдЯреНрд╕ рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реЛрдВ тАУ рдЖрдкрдХреЗ рд╡рд┐рдЪрд╛рд░ рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╣реИрдВ!
- рд╕рдХреНрд░рд┐рдп рд░рд╣реЗрдВ тАУ рдЕрдкрдиреЗ рд╕рд╛рд╣рд╕рд┐рдХ рд╡рд┐рдЪрд╛рд░реЛрдВ рдХреЛ рд╕рд╛рдЭрд╛ рдХрд░рддреЗ рд░рд╣реЗрдВ рдФрд░ рджреВрд╕рд░реЛрдВ рдХреЛ рдкреНрд░реЗрд░рд┐рдд рдХрд░реЗрдВред

рдореИрдЧреНрдирд┐рдлрд╛рдпрд░ рдХрд╛ рд╣рд┐рд╕реНрд╕рд╛ рдмрдирдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рджред рд╣рдо рдорд┐рд▓рдХрд░ рдПрдХ рдРрд╕рд╛ рдордВрдЪ рдмрдирд╛ рд░рд╣реЗ рд╣реИрдВ рдЬрд╣рд╛рдВ рд╣рд░ рдЖрд╡рд╛рдЬрд╝ рдорд╛рдпрдиреЗ рд░рдЦрддреА рд╣реИ! ЁЯЪА

рдЪрдордХрддреЗ рд░рд╣реЗрдВ,  
рдореИрдЧреНрдирд┐рдлрд╛рдпрд░ рдЯреАрдо`;

                await sendNotificationEmail(userEmail, subject, message);
            } else if (status === "rejected") {
                // Email for rejected post
                const subject = "LetтАЩs Refine Your Post тАУ YouтАЩre Almost There! ЁЯЪА";
                const message = `Hi ${userName},

Thank you for sharing your thoughts on Magnifier! After careful review, we noticed that your post doesnтАЩt fully align with our community guidelines. But donтАЩt worry тАУ this is just a small bump on the road to making your voice heard!

ЁЯУМ HereтАЩs what you can do next:
1. Review our Community Guidelines [Insert Link] to understand what we look for in posts.
2. Make the necessary edits to your post to ensure itтАЩs meaningful, respectful, and engaging.
3. Repost your updated content тАУ we canтАЩt wait to see it!

Remember, every great idea deserves a second chance. Your voice matters, and weтАЩre here to help you shine! тЬи 

LetтАЩs work together to make your next post a success. WeтАЩre rooting for you!

Warm regards,  
The Magnifier Team

рд╡рд┐рд╖рдп: рдЖрдЗрдП рдЖрдкрдХреА рдкреЛрд╕реНрдЯ рдХреЛ рдФрд░ рдмреЗрд╣рддрд░ рдмрдирд╛рдПрдВ тАУ рдЖрдк рд▓рдЧрднрдЧ рдкрд╣реБрдВрдЪ рдЧрдП рд╣реИрдВ! ЁЯЪА

рдирдорд╕реНрддреЗ ${translatedUsername},

рдореИрдЧреНрдирд┐рдлрд╛рдпрд░ рдкрд░ рдЕрдкрдиреЗ рд╡рд┐рдЪрд╛рд░ рд╕рд╛рдЭрд╛ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж! рд╕рд╛рд╡рдзрд╛рдиреАрдкреВрд░реНрд╡рдХ рд╕рдореАрдХреНрд╖рд╛ рдХреЗ рдмрд╛рдж, рд╣рдордиреЗ рджреЗрдЦрд╛ рдХрд┐ рдЖрдкрдХреА рдкреЛрд╕реНрдЯ рд╣рдорд╛рд░реЗ рдХрдореНрдпреБрдирд┐рдЯреА рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢реЛрдВ рдХреЗ рд╕рд╛рде рдкреВрд░реА рддрд░рд╣ рд╕реЗ рдореЗрд▓ рдирд╣реАрдВ рдЦрд╛рддреА рд╣реИред рд▓реЗрдХрд┐рди рдЪрд┐рдВрддрд╛ рди рдХрд░реЗрдВ тАУ рдпрд╣ рдЖрдкрдХреА рдЖрд╡рд╛рдЬрд╝ рдХреЛ рд╕реБрдирд╛рдиреЗ рдХреЗ рд░рд╛рд╕реНрддреЗ рдореЗрдВ рдПрдХ рдЫреЛрдЯреА рд╕реА рдмрд╛рдзрд╛ рд╣реИ!  

ЁЯУМ рдЖрдЧреЗ рдХреНрдпрд╛ рдХрд░реЗрдВ:
1. рд╣рдорд╛рд░реЗ рдХрдореНрдпреБрдирд┐рдЯреА рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢ [рд▓рд┐рдВрдХ рдбрд╛рд▓реЗрдВ] рдХреЛ рдкрдврд╝реЗрдВ рддрд╛рдХрд┐ рдЖрдк рд╕рдордЭ рд╕рдХреЗрдВ рдХрд┐ рд╣рдо рдкреЛрд╕реНрдЯ рдореЗрдВ рдХреНрдпрд╛ рджреЗрдЦрддреЗ рд╣реИрдВред
2. рдЕрдкрдиреА рдкреЛрд╕реНрдЯ рдореЗрдВ рдЖрд╡рд╢реНрдпрдХ рд╕рдВрд╢реЛрдзрди рдХрд░реЗрдВ рддрд╛рдХрд┐ рдпрд╣ рд╕рд╛рд░реНрдердХ, рд╕рдореНрдорд╛рдирдЬрдирдХ рдФрд░ рдЖрдХрд░реНрд╖рдХ рдмрди рд╕рдХреЗред
3. рдЕрдкрдиреА рдЕрдкрдбреЗрдЯреЗрдб рдкреЛрд╕реНрдЯ рдХреЛ рдлрд┐рд░ рд╕реЗ рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВ тАУ рд╣рдо рдЗрд╕реЗ рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдЙрддреНрд╕реБрдХ рд╣реИрдВ!

рдпрд╛рдж рд░рдЦреЗрдВ, рд╣рд░ рдорд╣рд╛рди рд╡рд┐рдЪрд╛рд░ рджреВрд╕рд░реЗ рдореМрдХреЗ рдХрд╛ рд╣рдХрджрд╛рд░ рд╣реИред рдЖрдкрдХреА рдЖрд╡рд╛рдЬрд╝ рдорд╛рдпрдиреЗ рд░рдЦрддреА рд╣реИ, рдФрд░ рд╣рдо рдЖрдкрдХреЛ рдЪрдордХрдиреЗ рдореЗрдВ рдорджрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдВ рд╣реИрдВ! тЬи

рдЖрдЗрдП рдорд┐рд▓рдХрд░ рдЖрдкрдХреА рдЕрдЧрд▓реА рдкреЛрд╕реНрдЯ рдХреЛ рд╕рдлрд▓ рдмрдирд╛рдПрдВред рд╣рдо рдЖрдкрдХреЗ рд╕рд╛рде рд╣реИрдВ!  

рд╕рд╛рджрд░,  
рдореИрдЧреНрдирд┐рдлрд╛рдпрд░ рдЯреАрдо`;

                await sendNotificationEmail(userEmail, subject, message);
            }
        }


 // SMS Notification
 // Correcting phone number reference
if (updatedPost.userId && updatedPost.userId.phoneNumber) {
  let message = "";
  if (status === "approved") {
      message = `Great news!! Your post "${updatedPost._id}" has been approved. Your post is now live on Magnifier and ready to inspire, engage, and spark conversations!`;
  } else {
      message = `Unfortunately, your post "${updatedPost._id}" was rejected. Thank you for sharing your thoughts on Magnifier.`;
  }

  await sendSMS(updatedPost.userId.phoneNumber, message);
}


        res.status(200).json({ message: `Post ${status}`, success: true });
    } catch (error) {
        console.error("Error updating post status:", error);
        res.status(500).json({ message: "Error updating post status", error });
    }
};


// Log out
export const logout= async (req, res) => {
  res.status(200).json({ message: "User logged out successfully." });
 }
